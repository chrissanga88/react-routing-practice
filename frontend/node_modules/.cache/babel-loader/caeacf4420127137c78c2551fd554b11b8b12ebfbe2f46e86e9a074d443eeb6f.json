{"ast":null,"code":"var _jsxFileName = \"/Users/chrissanga/Desktop/projects/react-routing-practice/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\nimport EventDetailPage, { loader as eventDetailLoader } from \"./pages/EventDetail\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport ErrorPage from \"./pages/Error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 19\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 18\n    }, this),\n    children: [\n    // The loader function will be executed by react router right before the specified route gets rendered, so the page won't load until you have the data from the backend. When you define a loader function, react router will automatically take any return value and make it available in the page that is being rendered as well as any other components where its needed.\n    {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 35\n      }, this),\n      loader: eventsLoader\n    },\n    // Creating a new eventId path with the EventDetailPage and EditEventPage as children allows us to access the eventDetailLoader in both components, so the event details can be used for both of those pages instead of having to create two seperate loaders. There is no element because the children do not have a shared layout. You can access loader data with useLoaderData in any component that's on the same level or a lower level than the route that the loader is added\n    {\n      path: ':eventId',\n      id: 'event-detail',\n      loader: eventDetailLoader,\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 39\n        }, this)\n      }, {\n        path: 'edit',\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 40\n        }, this)\n      }]\n    },\n    // Like a loader, action expects a function. Also like a loader it is best practice to put the function code inside of the component that \n    {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 35\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","RootLayout","HomePage","EventsPage","loader","eventsLoader","EventDetailPage","eventDetailLoader","NewEventPage","EditEventPage","EventsRootLayout","ErrorPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","id","App","_c","$RefreshReg$"],"sources":["/Users/chrissanga/Desktop/projects/react-routing-practice/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\nimport EventDetailPage, { loader as eventDetailLoader } from \"./pages/EventDetail\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport ErrorPage from \"./pages/Error\";\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <RootLayout />,\n    errorElement: <ErrorPage />,\n    children: [\n      { index: true, element: <HomePage /> },\n      { path: 'events', \n        element: <EventsRootLayout />,\n        children: [\n          // The loader function will be executed by react router right before the specified route gets rendered, so the page won't load until you have the data from the backend. When you define a loader function, react router will automatically take any return value and make it available in the page that is being rendered as well as any other components where its needed.\n          { index: true, element: <EventsPage />, loader: eventsLoader },\n          // Creating a new eventId path with the EventDetailPage and EditEventPage as children allows us to access the eventDetailLoader in both components, so the event details can be used for both of those pages instead of having to create two seperate loaders. There is no element because the children do not have a shared layout. You can access loader data with useLoaderData in any component that's on the same level or a lower level than the route that the loader is added\n          { path: ':eventId', \n            id: 'event-detail',\n            loader: eventDetailLoader,\n            children: [\n              { index: true, element: <EventDetailPage /> },\n              { path: 'edit', element: <EditEventPage /> },\n            ]},\n          // Like a loader, action expects a function. Also like a loader it is best practice to put the function code inside of the component that \n          { path: 'new', element: <NewEventPage /> },\n        ],\n      },\n    ],\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,UAAU,IAAIC,MAAM,IAAIC,YAAY,QAAQ,gBAAgB;AACnE,OAAOC,eAAe,IAAIF,MAAM,IAAIG,iBAAiB,QAAQ,qBAAqB;AAClF,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,SAAS,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGf,mBAAmB,CAAC,CACjC;EACEgB,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACZ,UAAU;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACvBC,YAAY,eAAER,OAAA,CAACF,SAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC3BE,QAAQ,EAAE,CACR;IAAEC,KAAK,EAAE,IAAI;IAAEP,OAAO,eAAEH,OAAA,CAACX,QAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC,EACtC;IAAEL,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEH,OAAA,CAACH,gBAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC7BE,QAAQ,EAAE;IACR;IACA;MAAEC,KAAK,EAAE,IAAI;MAAEP,OAAO,eAAEH,OAAA,CAACV,UAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAAEhB,MAAM,EAAEC;IAAa,CAAC;IAC9D;IACA;MAAEU,IAAI,EAAE,UAAU;MAChBS,EAAE,EAAE,cAAc;MAClBpB,MAAM,EAAEG,iBAAiB;MACzBe,QAAQ,EAAE,CACR;QAAEC,KAAK,EAAE,IAAI;QAAEP,OAAO,eAAEH,OAAA,CAACP,eAAe;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EAC7C;QAAEL,IAAI,EAAE,MAAM;QAAEC,OAAO,eAAEH,OAAA,CAACJ,aAAa;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC;IAC7C,CAAC;IACJ;IACA;MAAEL,IAAI,EAAE,KAAK;MAAEC,OAAO,eAAEH,OAAA,CAACL,YAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC;EAE9C,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,SAASK,GAAGA,CAAA,EAAG;EACb,oBAAOZ,OAAA,CAACb,cAAc;IAACc,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACM,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}