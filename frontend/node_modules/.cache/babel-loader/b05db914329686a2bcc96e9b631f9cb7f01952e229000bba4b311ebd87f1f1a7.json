{"ast":null,"code":"var _jsxFileName = \"/Users/chrissanga/Desktop/projects/react-routing-practice/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' };\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n\n// It's a best practice to include the loader code in the file where it's needed as opposed to in the createBrowserRouter function\nexport async function loader() {\n  return {\n    events: loadEvents()\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["/Users/chrissanga/Desktop/projects/react-routing-practice/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Await resolve={events}>\n      \n    </Await>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' };\n    throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {status: 500,});\n  } else {\n    return response;\n  }\n}\n\n// It's a best practice to include the loader code in the file where it's needed as opposed to in the createBrowserRouter function\nexport async function loader() {\n  return {\n    events: loadEvents(),\n  };\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AAEvD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC,CAAC;EAElC,oBACEI,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhB,CAAC;AAEZ;AAACN,EAAA,CARQD,UAAU;EAAA,QACEL,aAAa;AAAA;AAAAa,EAAA,GADzBR,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MAACC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC1F,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF;;AAEA;AACA,OAAO,eAAeQ,MAAMA,CAAA,EAAG;EAC7B,OAAO;IACLhB,MAAM,EAAEO,UAAU,CAAC;EACrB,CAAC;AACH;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}